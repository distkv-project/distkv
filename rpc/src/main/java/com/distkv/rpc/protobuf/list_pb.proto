syntax="proto3";

package com.distkv.rpc.protobuf;

import "common_pb.proto";

option java_package="com.distkv.rpc.protobuf.generated";
option java_outer_classname="ListProtocol";
option cc_generic_services = true;

message PutRequest {
    string key = 1;
    repeated string values = 2;
}

message PutResponse {
    Status status = 1;
}

// The type of a `get` request.
//
// GET_ALL indicates we should get all of the values of the specific key.
// GET_ONE indicates we should get a value of the specific index.
// GET_RANGE indicates that we should get the values of a range index.
enum GetType {
    GET_ALL = 0;
    GET_ONE = 1;
    GET_RANGE = 2;
};

// TODO(qwang): comment on this.
message GetRequest {
    GetType type = 1;
    string key = 2;
    int32 index = 3;
    int32 from = 4;
    int32 end = 5;
}

message GetResponse {
    Status status = 1;
    repeated string values = 2;
}

message LPutRequest {
    string key = 1;
    repeated string values = 2;
}

message LPutResponse {
    Status status = 1;
}

message RPutRequest {
    string key = 1;
    repeated string values = 2;
}

message RPutResponse {
    Status status = 1;
}

//The type of a 'remove' request
//
// RemoveOne indicates we should remove a element of the specific index.
// RemoveRange indicates we should remove the elements of a range index.
enum RemoveType {
    RemoveOne = 0;
    RemoveRange = 1;
}

message RemoveRequest {
    RemoveType type = 1;
    string key = 2;
    int32 index = 3;
    int32 from = 4;
    int32 end = 5;
}

message RemoveResponse {
    Status status = 1;
}


message MRemoveRequest {
    string key = 1;
    repeated int32 indexes = 2;
}

message MRemoveResponse {
    Status status = 1;
}

service DistKVListService {
    rpc put(PutRequest) returns (PutResponse);
    rpc get(GetRequest) returns (GetResponse);
    rpc lput(LPutRequest) returns (LPutResponse);
    rpc rput(RPutRequest) returns (RPutResponse);
    rpc remove(RemoveRequest) returns (RemoveResponse);
    rpc mremove(MRemoveRequest) returns (MRemoveResponse);
    rpc drop(DropRequest) returns (DropResponse);
}
